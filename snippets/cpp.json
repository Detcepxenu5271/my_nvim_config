{
	"oi cpp template": {
		"prefix": "oi-cpp",
		"description": "cpp template for OI",
		"body": [
			"/******************************************************************************",
			" * Filename: $TM_FILENAME",
			" * Problem: ${1}",
			" *****************************************************************************/",
			"#include <algorithm>",
			"#include <iostream>",
			"#include <string>",
			"#include <vector>",
			"#include <cstring>",
			"",
			"using namespace std;",
			"",
			"using ll = long long;",
			"",
			"const int kMaxN = 1e${2:5};",
			"",
			"int main() {",
			"\tstd::ios::sync_with_stdio(false);",
			"\tstd::cin.tie(0);",
			"",
			"\t$0",
			"",
			"\treturn 0;",
			"}"
		]
	},
	"oi gen template": {
		"prefix": "oi-gen",
		"description": "data generator template for OI",
		"body": [
			"#include <algorithm>",
			"#include <cassert>",
			"#include <iostream>",
			"#include <random>",
			"#include <set>",
			"#include <string>",
			"",
			"#include <cstdio>",
			"#include <cstdlib>",
			"#include <vector>",
			"",
			"/**************** random库设置 ****************/",
			"",
			"std::random_device rd;",
			"std::mt19937 rng;",
			"",
			"// 整数均匀分布 [a, b]:",
			"// uniform_int_ditribution<int> uidis(a, b);",
			"// std::cout << uidis(rng);",
			"using DisUI = std::uniform_int_distribution<int>;",
			"",
			"/**************** 工具 ****************/",
			"",
			"// 随机打乱数组 a[0..n-1]:",
			"//shuffle(a, a+n, rng);",
			"",
			"// 把整数 x 随机分成不为 0 的 n 份",
			"// 返回分割后的序列",
			"//TODO 未验证代码是否正确",
			"std::vector<int> randomDivide(int x, int n) {",
			"\tassert(x >= n); //XXX 异常处理",
			"\tstd::set<int> existSet;",
			"\tDisUI randNum(1, x-1);",
			"\tstd::vector<int> a;",
			"\ta.push_back(0);",
			"\tfor (int i = 0; i < n-1; i++) {",
			"\t\tint num = randNum(rng);",
			"\t\twhile (existSet.find(num) != existSet.end())",
			"\t\t\tnum = randNum(rng);",
			"\t\texistSet.insert(num);",
			"\t\ta.push_back(num);",
			"\t}",
			"\tstd::sort(a.begin(), a.end());",
			"\tfor (int i = 0; i < a.size()-1; i++)",
			"\t\ta[i] = a[i+1] - a[i];",
			"\ta.back() = x - a.back();",
			"\treturn a;",
			"}",
			"",
			"/**************** 数据范围 ****************/",
			"",
			"const int kMaxN = (int)1e5;",
			"",
			"int main(int argc, char *argv[]) {",
			"\trng.seed(rd()); // 先对随机数引擎设置种子",
			"",
			"\tint n;",
			"\tif (argc > 1) {",
			"\t\tsscanf(argv[1], \"%d\", &n);",
			"\t} else {",
			"\t\tn = kMaxN;",
			"\t}",
			"",
			"\treturn 0;",
			"}"
		]
	}
}


-- generated by Deepseek
-- 检测并设置适合当前 shell 的 cmdflag
local function setup_shell_options()
	-- 获取当前 shell 可执行文件名（不包含路径）
	local shell = vim.fn.fnamemodify(vim.o.shell, ':t')

	-- 转换为小写方便比较（Windows 不区分大小写）
	shell = string.lower(shell)

	-- 检查是否是 bash 或类似的 shell
	if string.find(shell, 'bash') or string.find(shell, 'zsh') then
		vim.o.shellcmdflag = '-c'
		vim.o.shellslash = true
		--print('检测到 Bash/Zsh，已设置兼容的 shellcmdflag')
	elseif string.find(shell, 'cmd') then
		-- 保持默认的 cmd.exe 设置
		vim.o.shellcmdflag = '/c'
		--print('检测到 CMD，使用默认设置')
	elseif string.find(shell, 'powershell') or string.find(shell, 'pwsh') then
		vim.o.shellcmdflag = '-Command'
		--print('检测到 PowerShell，已调整设置')
	else
		--print('未知 shell 类型: ' .. shell .. '，保持默认设置')
	end
end

-- 应用设置（在启动时和 Shell 变更时）
setup_shell_options()

-- TODO group
-- 当 shell 选项被修改时自动更新
vim.api.nvim_create_autocmd('OptionSet', {
	pattern = 'shell',
	callback = setup_shell_options
})

-- 可选：创建命令手动重新加载配置
--vim.api.nvim_create_user_command('ReloadShellConfig', setup_shell_options, {})

-- DIRTY shellquote on windows, bash (msys2)
if vim.fn.has('win32') and string.find(vim.o.shell, 'bash') then
	vim.o.shellquote = ''
	vim.o.shellxquote = ''
end

